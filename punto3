List<String> findWords(List<List<String>> matrix, List<String> words) {
  final rows = matrix.length;
  final cols = matrix[0].length;
  final foundWords = <String>[];

  final directions = [
    [0, 1],
    [1, 0],
    [0, -1],
    [-1, 0],
    [-1, -1],
    [-1, 1],
    [1, -1],
    [1, 1]
  ];

  bool searchWord(
      String word, int row, int col, List<List<bool>> visited, int index) {
    if (index == word.length) return true;

    if (row < 0 ||
        row >= rows ||
        col < 0 ||
        col >= cols ||
        visited[row][col] ||
        matrix[row][col] != word[index]) {
      return false;
    }

    visited[row][col] = true;

    for (var dir in directions) {
      int newRow = row + dir[0];
      int newCol = col + dir[1];
      if (searchWord(word, newRow, newCol, visited, index + 1)) {
        return true;
      }
    }

    visited[row][col] = false;
    return false;
  }

  for (var word in words) {
    bool wordFound = false;

    for (int row = 0; row < rows && !wordFound; row++) {
      for (int col = 0; col < cols && !wordFound; col++) {
        if (matrix[row][col] == word[0]) {
          var visited =
              List.generate(rows, (_) => List.generate(cols, (_) => false));
          if (searchWord(word, row, col, visited, 0)) {
            foundWords.add(word);
            wordFound = true;
          }
        }
      }
    }
  }

  return foundWords;
}
